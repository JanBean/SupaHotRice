# This script depends on `functions' .
# This is NOT a script for execution, but for loading functions, so NOT need execution permission or shebang.
# NOTE that you NOT need to `cd ..' because the `$0' is NOT this file, but the script file which will source this file.

# The script that use this file should have two lines on its top as follows:
# cd "$(dirname "$0")"
# export base="$(pwd)"

# installs all apps, aur apps and flatpak apps
install_apps() {

  # Apps installation
  remove_bashcomments_emptylines ./apps/apps.lst ./cache/apps.lst
  readarray -t apps < ./cache/apps.lst
  ask_execute install_yay_packages "${apps[@]}"

  # Flatpak app installation
  remove_bashcomments_emptylines ./apps/apps-flathub.lst ./cache/apps-flathub.lst
  readarray -t flathub_apps < ./cache/apps-flathub.lst
  ask_execute install_flathub_packages "${flathub_apps[@]}"
}

# Install required pacman packages
install_pacman_packages() {
    toInstall=()
    for pkg; do
        if [[ $(is_installed_pacman "${pkg}") == 0 ]]; then
            echo ":: ${pkg} is already installed."
            continue
        fi
        toInstall+=("${pkg}")
    done
    if [[ "${toInstall[@]}" == "" ]]; then
        # nothing to install
        return
    fi
    printf "Package not installed: %s\n" "${toInstall[@]}"
    on_error_retry sudo pacman --noconfirm -S "${toInstall[@]}"
}

# Install required yay packages
install_yay_packages() {
    toInstall=()

    # Install required yay packages
    for pkg; do
        if [[ $(is_installed_yay "${pkg}") == 0 ]]; then
            echo ":: ${pkg} is already installed."
            continue
        fi
        toInstall+=("${pkg}")
    done
    if [[ "${toInstall[@]}" == "" ]]; then
        # nothing to install
        return
    fi
    printf "Yay package not installed: %s\n" "${toInstall[@]}"
    on_error_retry yay -S --noconfirm "${toInstall[@]}"
}

# Install optional flatpak apps
install_flathub_packages() {
    toInstall=()
    for pkg; do
        # check if already installed
        if flatpak list --app | awk '{print $2}' | grep -q "^$pkg$"; then
            echo ":: ${pkg} is already installed."
            continue
        fi
        toInstall+=("${pkg}")
    done
    
    if [[ "${toInstall[@]}" == "" ]]; then
        # nothing to install 
        return
    fi

    if gum confirm "Install flatpak apps?"; then
        for pkg in "${toInstall[@]}"; do
            on_error_retry flatpak install flathub -y "${pkg}"
        done
    fi
}

is_installed_pacman() {
    package="$1"
    check="$(sudo pacman -Qs --color always "${package}" | grep "local" | grep "${package} ")"
    if [ -n "${check}" ]; then
        echo 0 #'0' means 'true' in Bash
        return #true
    fi
    echo 1 #'1' means 'false' in Bash
    return #false
}

is_installed_yay() {
    package="$1"
    check="$(yay -Qq "${package}" 2>/dev/null)"
    if [ -n "${check}" ]; then
        echo 0  # true
        return 0
    fi
    echo 1  # false
    return 1
}